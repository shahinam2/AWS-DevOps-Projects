AWSTemplateFormatVersion: "2010-09-09"

Description: 'AWS CloudFormation Sample Template RDS_MySQL_With_Read_Replica: Sample template showing how to create a highly-available, RDS DBInstance with a read replica. **WARNING** This template creates an Amazon Relational Database Service database instance and Amazon CloudWatch alarms. You will be billed for the AWS resources used if you create a stack from this template.'

Parameters:
  DBName:
    Description: The database name
    Type: String
    Default: EmailDB
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBUser:
    Description: The database admin account username
    Type: String
    Default: admin
    NoEcho: "true"
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBAllocatedStorage:
    Description: The size of the database (Gb)
    Type: Number
    Default: "20"
    MinValue: "5"
    MaxValue: "1024"
    ConstraintDescription: must be between 5 and 1024Gb.

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.micro
    ConstraintDescription: must select a valid database instance type.

  EC2SecurityGroup:
    Description: The EC2 security group that contains instances that need access to the database
    Type: String
    Default: SecurityGroup # allow ports 80 and 22
    AllowedPattern: '[a-zA-Z0-9\-]+'
    ConstraintDescription: must be a valid security group name.

  LatestAmiId:
    Description: "SSM parameter for the latest Amazon Linux 2 AMI ID"
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

  KeyPairParameter:
    Description: Select your keypair.
    Type: AWS::EC2::KeyPair::KeyName
    Default: "shahin-key"

  InstanceTypeParameter:
    Description: Select your instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.nano
      - t2.small

Resources:
# APP Recources
  MyInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyInstancePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - secretsmanager:GetSecretValue
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyInstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        # Allow SSH access
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Replace with a more restrictive CIDR if needed
        # Allow HTTP access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Replace with a more restrictive CIDR if needed

  Instance:
    Type: AWS::EC2::Instance
    DependsOn: MainDB
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyPairParameter
      SecurityGroups: 
        - !Ref EC2SecurityGroup
      Tags: 
        - Key: Name
          Value: !Sub "Web Server of ${AWS::StackName}"
      UserData: 
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          set -e
          
          # Prepare the environment variables
          mkdir -p /home/ec2-user/Email_Database/
          cat > /home/ec2-user/Email_Database/.env <<EOF
          DB_ENDPOINT=${DB_ENDPOINT}
          DB_NAME=${DB_NAME}
          AWS_REGION=${AWS_REGION}
          SECRET_ARN=${SECRET_ARN}
          EOF

          curl -o /tmp/setup-with-pip.sh https://raw.githubusercontent.com/shahinam2/AWS-DevOps-Projects/refs/heads/main/03_Email_Database/setup-with-pip.sh
          chmod +x /tmp/setup-with-pip.sh
          bash /tmp/setup-with-pip.sh
        - {
          DB_ENDPOINT: !GetAtt MainDB.Endpoint.Address,
          DB_NAME: !Ref DBName,
          AWS_REGION: !Ref AWS::Region,
          SECRET_ARN: !Ref DBCredential
        } 
      IamInstanceProfile: !Ref InstanceProfile

# DB Resources
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupName: !Ref EC2SecurityGroup

  DBCredential:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true

  MainDB:
    Type: AWS::RDS::DBInstance
    DependsOn: DBCredential
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBCredential}}}'
      PubliclyAccessible: false
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: Master Database
      BackupRetentionPeriod: 0  # For testing purposes, set to 0

Outputs:
  DBConnectionEndpoint:
    Description: Connection string for the MySQL database
    Value: !Sub "${MainDB.Endpoint.Address}/${DBName}"

  WebsiteURL:
    Description: "URL of the Email Database App"
    Value: !Sub "http://${Instance.PublicDnsName}"