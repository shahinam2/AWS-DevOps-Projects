AWSTemplateFormatVersion: '2010-09-09'
Description: | 
  Recipe Sharing Application - Serverless Edition
  This template creates a serverless application with the following components:
  - S3 bucket for static website hosting
  - CloudFront distribution for content delivery
  - Cognito User Pool for authentication
  - DynamoDB table for data storage
  - API Gateway for HTTP API
  - Lambda functions for backend logic

Parameters:  
  APIName:
    Type: String
    Description: API Name
    Default: RecipeSharingAPI

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket name for Lambda code

Resources:
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref APIName
      ProtocolType: HTTP
      Description: Recipe Sharing Application - Serverless Edition
      CorsConfiguration:
        AllowOrigins:
          - '*'  # narrow this down to your frontend domain in production
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - '*'

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: dev
      AutoDeploy: true

  ##################### 0 - TESTAUTH ROUTE #####################
#PERMISSIONS

  LambdaExecutionAuthRole:  # It gives the Lambda function the minimum permissions it needs to run
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole  # "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"

  AuthTestLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthTestLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  AuthTestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: testauth
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambdas/testauth.zip
      Role: !GetAtt LambdaExecutionAuthRole.Arn
      Timeout: 60         

#ROUTE

  HttpAuthTestRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /auth
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiTestAuthIntegration

  HttpApiTestAuthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthTestLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'
