AWSTemplateFormatVersion: '2010-09-09'
Description: | 
  Recipe Sharing Application - Serverless Edition
  This template creates a serverless application with the following components:
  - S3 bucket for static website hosting
  - CloudFront distribution for content delivery
  - Cognito User Pool for authentication
  - DynamoDB table for data storage
  - API Gateway for HTTP API
  - Lambda functions for backend logic

Parameters:  
  APIName:
    Type: String
    Description: API Name
    Default: RecipeSharingAPI

  UserPoolName:
    Type: String
    Description: The name for the Cognito User Pool
    Default: recipesharinguserpool

  Username:
    Type: String
    Description: The username for the initial user
    Default: admin

  UserEmail:
    Type: String
    Description: The email for the initial user
    Default: shahin.hemmati@devopsdetours.com

  LambdasBucketName:
    Type: String
    Description: S3 bucket name for Lambda code

  FrontendBucket:
    Type: String
    Description: S3 bucket name for frontend code

Resources:

#FRONTEND

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "recipesharing-frontend-${AWS::AccountId}"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Origin Access Identity for ${AWS::StackName}'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity.Id}'
            Action: 's3:GetObject'
            Resource: !Sub '${S3Bucket.Arn}/*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub 'origin-${AWS::StackName}'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /
            ErrorCachingMinTTL: 0
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: true
        Origins:
          - Id: !Sub 'origin-${AWS::StackName}'
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity.Id}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

#BACKEND

#DATA LAYER

  RecipesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: recipes

#AUTHENTICATION

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6           # For testing purposes only
          RequireLowercase: false    # For testing purposes only
          RequireNumbers: false      # For testing purposes only
          RequireSymbols: false      # For testing purposes only
          RequireUppercase: false    # For testing purposes only
      MfaConfiguration: "OFF"        # For testing purposes only
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true  # Change to false to allow users to sign up
        InviteMessageTemplate:
          EmailMessage: "Hello {username}.\nThis {####} is your temporary password for Recipe Sharring Serverless App.\nPlease change it after your first login."
          EmailSubject: "Your Recipe Sharring App temporary password"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          Required: true
          Mutable: true

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: my-user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail
      UserPoolId: !Ref CognitoUserPool
      Username: !Ref Username
      DesiredDeliveryMediums:
        - EMAIL

#API

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref APIName
      ProtocolType: HTTP
      Description: Recipe Sharing Applicatoin - Serverless Edition
      CorsConfiguration:
        AllowOrigins:
          - '*'  # narrow this down to your frontend domain in production
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - '*'

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: dev
      AutoDeploy: true

  JWTAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      Name: CognitoAuthorizer
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"

##################### 1 - HEALTHCHECK ROUTE #####################
#PERMISSIONS

  LambdaExecutionHCRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthCheckLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  HealthCheckLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: healthcheck
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: lambdas/healthcheck.zip
      Role: !GetAtt LambdaExecutionHCRole.Arn
      Timeout: 60

#ROUTE

  HttpApiHealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /health
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiHealthIntegration

  HttpApiHealthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

##################### 2 - GET RECIPES ROUTE #####################
#PERMISSIONS

  LambdaExecutionReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBReadAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
                - 'dynamodb:Scan'
                - 'dynamodb:Query'
              Resource:
                - !GetAtt RecipesTable.Arn

  GetRecipesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetRecipesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  GetRecipesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-recipes
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: lambdas/get-recipes.zip
      Role: !GetAtt LambdaExecutionReadRole.Arn
      Timeout: 60

#ROUTE
  
  HttpApiGetRecipesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRecipesLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  HttpApiGetRecipesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /recipes
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiGetRecipesIntegration
    
##################### 3 - POST RECIPES ROUTE #####################
#PERMISSIONS

  LambdaExecutionCreateRecipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBWriteAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:PutItem'

              Resource:
                - !GetAtt RecipesTable.Arn

  PostRecipeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostRecipeLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  PostRecipeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: post-recipe
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: lambdas/post-recipe.zip
      Role: !GetAtt LambdaExecutionCreateRecipeRole.Arn
      Timeout: 60
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:68         

#ROUTE

  HttpApiPostRecipeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /recipes
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiPostRecipesIntegration
      AuthorizationType: JWT
      AuthorizerId: !Ref JWTAuthorizer

  HttpApiPostRecipesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRecipeLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

##################### 4 - DELETE RECIPES ROUTE #####################
#PERMISSIONS

  LambdaExecutionDeleteRecipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBDeleteAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:DeleteItem'
              Resource:
                - !GetAtt RecipesTable.Arn

  DeleteRecipeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DeleteRecipeLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  DeleteRecipeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: delete-recipe
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: lambdas/delete-recipe.zip
      Role: !GetAtt LambdaExecutionDeleteRecipeRole.Arn
      Timeout: 60         

#ROUTE

  HttpApiDeleteRecipeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: DELETE /recipes/{recipe_id}
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiDeleteRecipeIntegration
      AuthorizationType: JWT
      AuthorizerId: !Ref JWTAuthorizer

  HttpApiDeleteRecipeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteRecipeLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

##################### 5 - LIKE RECIPES ROUTE #####################
#PERMISSIONS

  LambdaExecutionLikeRecipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDBUpdateAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:UpdateItem'
              Resource:
                - !GetAtt RecipesTable.Arn

  LikeRecipeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LikeRecipeLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref HttpApi
          - '/*/*'

#LAMBDA

  LikeRecipeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: like-recipe
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: lambdas/like-recipe.zip
      Role: !GetAtt LambdaExecutionLikeRecipeRole.Arn
      Timeout: 60         

#ROUTE

  HttpApiLikeRecipeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: PUT /recipes/like/{recipe_id}
      Target: !Join
        - /
        - - integrations
          - !Ref HttpApiLikeRecipesIntegration

  HttpApiLikeRecipesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LikeRecipeLambdaFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

#OUTPUTS

Outputs:
  HttpApiEndpoint:
    Description: The endpoint of the HTTP API
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev'

  UserPoolId:
    Description: The Id of the Cognito User Pool
    Value: !Ref CognitoUserPool

  UserPoolClientId:
    Description: The Id of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient

  CognitoRegion:
    Description: The AWS Region where Cognito User Pool is deployed
    Value: !Ref 'AWS::Region'
  
  CloudFrontDistributionUrl:
    Description: URL of the CloudFront distribution to Access your frontend
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDistributionUrl"
