name: Deploy Linkedin profile picture analyzer frontend

on:
  workflow_dispatch:
  # Uncomment the following lines to trigger on push to main branch and on changes to the frontend directory
  # push:
  #   paths:
  #       - '07_Linkedin_Profile_Picture_Analyzer/frontend/**'
  #   branches:
  #       - main

env:
    Infrastructure_Path: 07_Linkedin_Profile_Picture_Analyzer/infrastructure
    Frontend_Path: 07_Linkedin_Profile_Picture_Analyzer/frontend

jobs:
    deploy:
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: ${{ secrets.AWS_REGION }}
    
        steps:
          - name: Checkout repo
            uses: actions/checkout@v4.2.2
    
          - name: Set up AWS CLI
            uses: aws-actions/configure-aws-credentials@v4.1.0
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
          
          - name: HashiCorp - Setup Terraform
            uses: hashicorp/setup-terraform@v3.1.2
            with:
              terraform_version: "1.11.4"
  
          - name: Terraform Init and Get the API gateway Base URL
            run: |
              terraform init
              echo "API_GATEWAY_BASE_URL=$(terraform output -raw api_gateway_base_url)" >> $GITHUB_ENV
              echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket)" >> $GITHUB_ENV
            working-directory: ${{ env.Infrastructure_Path }}
  
          - name: Create config.json for frontend & Deploy to frontend bucket
            run: |
              echo '{"base_url":"'"${API_GATEWAY_BASE_URL}"'"}' > config.json
              aws s3 sync . s3://${FRONTEND_BUCKET}/ 
            working-directory: ${{ env.Frontend_Path }}

          - name: Invalidate CloudFront cache
            run: |
              echo "Getting CloudFront distribution ID..."
              echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
              echo "Invalidating CloudFront cache..."
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
            working-directory: ${{ env.Infrastructure_Path }}