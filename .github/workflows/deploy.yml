name: Deploy Recipe Sharing App Serverless Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger from GitHub UI

env:
  AWS_REGION: eu-central-1
  LAMBDAS_BUCKET_NAME: recipe-sharing-lambdas-${{ github.run_id }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for Lambda codes
        run: |
          echo "🔍 Checking if S3 bucket '$LAMBDAS_BUCKET_NAME' exists in region '$AWS_REGION'..."
          if aws s3api head-bucket --bucket "$LAMBDAS_BUCKET_NAME" 2>/dev/null; then
            echo "✅ Bucket '$LAMBDAS_BUCKET_NAME' already exists."
          else
            echo "⚠️ Bucket '$LAMBDAS_BUCKET_NAME' does not exist. Creating..."
            aws s3api create-bucket \
              --bucket "$LAMBDAS_BUCKET_NAME" \
              --region "$AWS_REGION" \
              --create-bucket-configuration LocationConstraint="$AWS_REGION"
            echo "🎉 Bucket '$LAMBDAS_BUCKET_NAME' created successfully."
          fi

      - name: Package all Lambda functions
        run: |
          # Absolute path avoids “how many ../ ?” problems entirely
          # I take for granted that GITHUB_WORKSPACE is correctly set and 
          # this is true when using actions/checkout. If not, this could break.
          ARTIFACTS_DIR="${GITHUB_WORKSPACE}/artifacts"  # GITHUB_WORKSPACE is the root of the repo
          mkdir -p "$ARTIFACTS_DIR"                      # mkdir is idempotent.
          
          for dir in 05_Recipe_Sharing_App_Serverless_Edition/lambdas/*/ ; do
            fn_name=$(basename "$dir")
          
            # skip empty function folders to avoid creating useless .zip files with zero content.
            [ "$(find "$dir" -type f | wc -l)" -eq 0 ] && {
              echo "⚠️ Skipping $fn_name - no files inside."
              continue
            }
          
            echo "📦 Zipping $fn_name …"
            # Commands inside the parentheses run in a separate process.
            # Any environment changes (like cd "$dir") do not affect the parent shell.
            (
              cd "$dir"                     # inside the Lambda folder
              zip -qr "${ARTIFACTS_DIR}/${fn_name}.zip" .   # write to root/artifacts
            )
          done

      - name: Upload all lambda artifacts to S3
        run: |
          # Upload all the zip files to the S3 bucket
          for file in ${GITHUB_WORKSPACE}/artifacts/*.zip
          do
            aws s3 cp "$file" "s3://$LAMBDAS_BUCKET_NAME/lambdas/"
          done

      - name: Deploy CloudFormation
        run: |
          aws cloudformation deploy \
          --template-file 05_Recipe_Sharing_App_Serverless_Edition/CFN-Template.yaml \
          --stack-name recipe-sharing \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides "LambdasBucketName=$LAMBDAS_BUCKET_NAME"

      - name: Build and Deploy Frontend
        run: |
          # Get the cf template outputs
          aws cloudformation describe-stacks --stack-name recipe-sharing --query "Stacks[0].Outputs" --output json > outputs.json
          
          # Extract the necessary output values
          HttpApiEndpoint=$(jq -r '.[] | select(.OutputKey=="HttpApiEndpoint") | .OutputValue' outputs.json)
          UserPoolId=$(jq -r '.[] | select(.OutputKey=="UserPoolId") | .OutputValue' outputs.json)
          UserPoolClientId=$(jq -r '.[] | select(.OutputKey=="UserPoolClientId") | .OutputValue' outputs.json)
          CognitoRegion=$(jq -r '.[] | select(.OutputKey=="CognitoRegion") | .OutputValue' outputs.json)
          CloudFrontDistributionUrl=$(jq -r '.[] | select(.OutputKey=="CloudFrontDistributionUrl") | .OutputValue' outputs.json)

          # Replace the placeholders in the frontend config files
          CONFIGS_FILE=05_Recipe_Sharing_App_Serverless_Edition/frontend/src/configs/configs.tsx
          AWS_EXPORTS_FILE=05_Recipe_Sharing_App_Serverless_Edition/frontend/src/configs/aws-exports.ts
          sed -i "s|YOUR_API_URL|$HttpApiEndpoint|" $CONFIGS_FILE
          sed -i "s|CognitoRegion|$CognitoRegion|g" $AWS_EXPORTS_FILE
          sed -i "s|UserPoolId|$UserPoolId|" $AWS_EXPORTS_FILE
          sed -i "s|UserPoolClientId|$UserPoolClientId|" $AWS_EXPORTS_FILE
          
          # Build the frontend
          cd 05_Recipe_Sharing_App_Serverless_Edition/frontend
          npm ci
          npm run build

          # Sync the build output to the S3 bucket
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws s3 sync dist/ s3://recipesharing-frontend-$ACCOUNT_ID --delete     # Uploads only changed files 

          # Optionally, invalidate CloudFront cache
          # aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"

      #- name: Clean up
      #  if: always()  # This step will run even if the previous steps fail
      #  run: |
      #    # Remove the artifacts directory
      #    rm -rf artifacts
          # Optionally, delete the S3 bucket if you want to clean up after deployment
      #    aws s3 rb s3://$LAMBDAS_BUCKET_NAME --force
          
