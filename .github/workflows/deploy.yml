name: Deploy Recipe Sharing App Serverless Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # allows manual trigger from GitHub UI

env:
  AWS_REGION: eu-central-1
  LAMBDA_BUCKET: my-lambda-code-bucket

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      LAMBDAS_BUCKET_NAME: recipe-sharing-lambdas-${{ github.run_id }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for Lambda codes
        run: |
          # Check if the bucket already exists. If it doesn't, create it.
          aws s3api head-bucket --bucket $LAMBDAS_BUCKET_NAME || \
          aws s3api create-bucket --bucket $LAMBDAS_BUCKET_NAME --region $AWS_REGION \
            --create-bucket-configuration LocationConstraint=$AWS_REGION

      - name: Package all Lambda functions
        run: |
          mkdir -p artifacts
          for dir in 05_Recipe_Sharing_App_Serverless_Edition/lambdas/*/
          do
            dir_name=$(basename "$dir")
            zip -r "artifacts/${dir_name}.zip" "$dir"
          done

      - name: Upload all lambda artifacts to S3
        run: |
          # Upload all the zip files to the S3 bucket
          for file in artifacts/*.zip
          do
            aws s3 cp "$file" "s3://$LAMBDAS_BUCKET_NAME/lambdas/"
          done

      - name: Deploy CloudFormation
        run: |
          aws cloudformation create-stack \
          --template-body file://05_Recipe_Sharing_App_Serverless_Edition/CFN-Template.yaml \
          --stack-name recipe-sharing \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides ParameterKey=FrontendBucket,ParameterValue=$LAMBDAS_BUCKET_NAME

      - name: Build and Deploy Frontend
        run: |
          # Get the cf template outputs
          aws cloudformation describe-stacks --stack-name recipe-sharing --query "Stacks[0].Outputs" --output json > outputs.json
          
          # Extract the necessary output values
          HttpApiEndpoint=$(jq -r '.[] | select(.OutputKey=="HttpApiEndpoint") | .OutputValue' outputs.json)
          echo "HTTP API Endpoint: $HttpApiEndpoint"
          UserPoolId=$(jq -r '.[] | select(.OutputKey=="UserPoolId") | .OutputValue' outputs.json)
          echo "User Pool ID: $UserPoolId"
          UserPoolClientId=$(jq -r '.[] | select(.OutputKey=="UserPoolClientId") | .OutputValue' outputs.json)
          echo "User Pool Client ID: $UserPoolClientId"
          CognitoRegion=$(jq -r '.[] | select(.OutputKey=="CognitoRegion") | .OutputValue' outputs.json)
          echo "Cognito Region: $CognitoRegion"
          CloudFrontDistributionUrl=$(jq -r '.[] | select(.OutputKey=="CloudFrontDistributionUrl") | .OutputValue' outputs.json)
          echo "CloudFront Distribution URL: $CloudFrontDistributionUrl"

          # Replace the placeholders in the frontend config files
          CONFIGS_FILE=05_Recipe_Sharing_App_Serverless_Edition/frontend/src/configs/configs.tsx
          AWS_EXPORTS_FILE=05_Recipe_Sharing_App_Serverless_Edition/frontend/src/aws-exports.ts
          sed -i "s|YOUR_API_URL|$HttpApiEndpoint|" $CONFIGS_FILE
          sed -i "s|[CognitoRegion]|$CognitoRegion|g" $AWS_EXPORTS_FILE
          sed -i "s|[UserPoolId]|$UserPoolId|" $AWS_EXPORTS_FILE
          sed -i "s|[UserPoolClientId]|$UserPoolClientId|" $AWS_EXPORTS_FILE
          
          # Build the frontend
          cd 05_Recipe_Sharing_App_Serverless_Edition/frontend
          npm install
          npm run build

          # Sync the build output to the S3 bucket
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          aws s3 sync 05_Recipe_Sharing_App_Serverless_Edition/frontend/dist/ s3://recipesharing-frontend-$ACCOUNT_ID --delete     # Uploads only changed files 

          # Optionally, invalidate CloudFront cache
          # aws cloudfront create-invalidation --distribution-id YOUR_DISTRIBUTION_ID --paths "/*"

      - name: Clean up
        if: always()  # This step will run even if the previous steps fail
        run: |
          # Remove the artifacts directory
          rm -rf artifacts
          # Optionally, delete the S3 bucket if you want to clean up after deployment
          aws s3 rb s3://$LAMBDAS_BUCKET_NAME --force
          
